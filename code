# Nabiha Khan - Prof Frankl
# Independent Project


from __future__ import absolute_import, division

from psychopy import locale_setup
from psychopy import prefs
from psychopy import sound, gui, visual, core, data, event, logging, clock
from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED,
                                STOPPED, FINISHED, PRESSED, RELEASED, FOREVER)

import numpy as np  # whole numpy lib is available, prepend 'np.'
from numpy import (sin, cos, tan, log, log10, pi, average,
                   sqrt, std, deg2rad, rad2deg, linspace, asarray)
from numpy.random import random, randint, normal, shuffle
import os  # handy system and path functions
import sys  # to get file system encoding

from psychopy.hardware import keyboard

# Ensure that relative paths start from the same directory as this script
_thisDir = os.path.dirname(os.path.abspath(__file__))
os.chdir(_thisDir)

# Store info about the experiment session
psychopyVersion = '3.2.4'
expName = 'IAD loop'  # from the Builder filename that created this script
expInfo = {'participant': '', 'session': '001'}
dlg = gui.DlgFromDict(dictionary=expInfo, sortKeys=False, title=expName)
if dlg.OK == False:
    core.quit()  # user pressed cancel
expInfo['date'] = data.getDateStr()  # add a simple timestamp
expInfo['expName'] = expName
expInfo['psychopyVersion'] = psychopyVersion

# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc
filename = _thisDir + os.sep + u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])

# An ExperimentHandler isn't essential but helps with data saving
thisExp = data.ExperimentHandler(name=expName, version='',
    extraInfo=expInfo, runtimeInfo=None,
    originPath='C:\\Users\\nabok\\OneDrive\\Documents\\NYU\\Fall 2019\\Independent Study\\Independent Project Final.py',
    savePickle=True, saveWideText=True,
    dataFileName=filename)
# save a log file for detail verbose info
logFile = logging.LogFile(filename+'.log', level=logging.EXP)
logging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file

endExpNow = False  # flag for 'escape' or other condition => quit the exp
frameTolerance = 0.001  # how close to onset before 'same' frame

# Start Code - component code to be run before the window creation

# Setup the Window
win = visual.Window(
    size=(1024, 768), fullscr=True, screen=0, 
    winType='pyglet', allowGUI=True, allowStencil=False,
    monitor='testMonitor', color=[0,0,0], colorSpace='rgb',
    blendMode='avg', useFBO=True, 
    units='height')
# store frame rate of monitor if we can measure it
expInfo['frameRate'] = win.getActualFrameRate()
if expInfo['frameRate'] != None:
    frameDur = 1.0 / round(expInfo['frameRate'])
else:
    frameDur = 1.0 / 60.0  # could not measure, so guess

# create a default keyboard (e.g. to check for escape)
defaultKeyboard = keyboard.Keyboard()

# Initialize components for Routine "Welcome_Screen"
Welcome_ScreenClock = core.Clock()
Welcometext = visual.TextStim(win=win, name='Welcometext',
    text='Welcome! \nThis study contains two parts.\nThe first set of instructions is on the following screen.\nPress the space bar to continue.',
    font='Arial',
    pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);
Welcomekey_resp = keyboard.Keyboard()

# Initialize components for Routine "Internet_Welcome_Screen"
Internet_Welcome_ScreenClock = core.Clock()
Internettext = visual.TextStim(win=win, name='Internettext',
    text='Part 1: \nThese questions will focus on internet use. Remember that internet use composes of social media, watching videos, email, and much more.\nPlease answer the following questions for this study honestly.\n\nPress the space bar to coninue when ready.\n',
    font='Arial',
    pos=(0, 0), height=0.03, wrapWidth=None, ori=0, 
    color='blue', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);
Internetkey_resp = keyboard.Keyboard()

# Initialize components for Routine "Study_Trial"
Study_TrialClock = core.Clock()
StudyQuestiontext = visual.TextStim(win=win, name='StudyQuestiontext',
    text='default text',
    font='Arial',
    pos=(0, 0.2), height=0.05, wrapWidth=None, ori=0, 
    color='green', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);
InternetNumberkey_resp = keyboard.Keyboard()
instructionstext = visual.TextStim(win=win, name='instructionstext',
    text='0 = Does not apply\n1 = Rarely\n2 = Occasionally\n3 = Frequently\n4 = Often\n5 = Always\n',
    font='Arial',
    pos=(0, -0.1), height=0.05, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-2.0);
instructions2text = visual.TextStim(win=win, name='instructions2text',
    text='Using the keyboard click the number that applies.',
    font='Arial',
    pos=(0, -0.3), height=0.05, wrapWidth=None, ori=0, 
    color='purple', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-3.0);

# Initialize components for Routine "Personality_Welcome_Screen"
Personality_Welcome_ScreenClock = core.Clock()
Personalitytext = visual.TextStim(win=win, name='Personalitytext',
    text='Part 2: \nThis portion will focus on how you view yourself.\nAnswer as honestly as possible.\nRead the following statements and answer them using the following scale: \n1 = Disagree strongly\n2 = Disagree a little\n3 = Neither agree nor disagree\n4 = Agree a little\n5 = Agree strongly\nPress the space bar to continue when ready.',
    font='Arial',
    pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
    color='blue', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);
key_resp = keyboard.Keyboard()

# Initialize components for Routine "Study_Trial_2"
Study_Trial_2Clock = core.Clock()
PQtext = visual.TextStim(win=win, name='PQtext',
    text='default text',
    font='Arial',
    pos=(0, 0.1), height=0.05, wrapWidth=None, ori=0, 
    color='green', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);
rating_2 = visual.RatingScale(win=win, name='rating_2', marker='triangle', size=1.5, pos=[0.0, 0.0], low=1, high=5, labels=['Disagree', 'Agree'], scale='')

# Initialize components for Routine "Results"
ResultsClock = core.Clock()
resultstext = visual.TextStim(win=win, name='resultstext',
    text='Thankyou for participating in the study.',
    font='Arial',
    pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
    color='orange', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);
key_resp_2 = keyboard.Keyboard()

# Create some handy timers
globalClock = core.Clock()  # to track the time since experiment started
routineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine 

# ------Prepare to start Routine "Welcome_Screen"-------
# update component parameters for each repeat
Welcomekey_resp.keys = []
Welcomekey_resp.rt = []
# keep track of which components have finished
Welcome_ScreenComponents = [Welcometext, Welcomekey_resp]
for thisComponent in Welcome_ScreenComponents:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED
# reset timers
t = 0
_timeToFirstFrame = win.getFutureFlipTime(clock="now")
Welcome_ScreenClock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
frameN = -1
continueRoutine = True

# -------Run Routine "Welcome_Screen"-------
while continueRoutine:
    # get current time
    t = Welcome_ScreenClock.getTime()
    tThisFlip = win.getFutureFlipTime(clock=Welcome_ScreenClock)
    tThisFlipGlobal = win.getFutureFlipTime(clock=None)
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *Welcometext* updates
    if Welcometext.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
        # keep track of start time/frame for later
        Welcometext.frameNStart = frameN  # exact frame index
        Welcometext.tStart = t  # local t and not account for scr refresh
        Welcometext.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(Welcometext, 'tStartRefresh')  # time at next scr refresh
        Welcometext.setAutoDraw(True)
    
    # *Welcomekey_resp* updates
    waitOnFlip = False
    if Welcomekey_resp.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
        # keep track of start time/frame for later
        Welcomekey_resp.frameNStart = frameN  # exact frame index
        Welcomekey_resp.tStart = t  # local t and not account for scr refresh
        Welcomekey_resp.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(Welcomekey_resp, 'tStartRefresh')  # time at next scr refresh
        Welcomekey_resp.status = STARTED
        # keyboard checking is just starting
        waitOnFlip = True
        win.callOnFlip(Welcomekey_resp.clock.reset)  # t=0 on next screen flip
        win.callOnFlip(Welcomekey_resp.clearEvents, eventType='keyboard')  # clear events on next screen flip
    if Welcomekey_resp.status == STARTED and not waitOnFlip:
        theseKeys = Welcomekey_resp.getKeys(keyList=['space'], waitRelease=False)
        if len(theseKeys):
            theseKeys = theseKeys[0]  # at least one key was pressed
            
            # check for quit:
            if "escape" == theseKeys:
                endExpNow = True
            Welcomekey_resp.keys = theseKeys.name  # just the last key pressed
            Welcomekey_resp.rt = theseKeys.rt
            # a response ends the routine
            continueRoutine = False
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in Welcome_ScreenComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "Welcome_Screen"-------
for thisComponent in Welcome_ScreenComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('Welcometext.started', Welcometext.tStartRefresh)
thisExp.addData('Welcometext.stopped', Welcometext.tStopRefresh)
# check responses
if Welcomekey_resp.keys in ['', [], None]:  # No response was made
    Welcomekey_resp.keys = None
thisExp.addData('Welcomekey_resp.keys',Welcomekey_resp.keys)
if Welcomekey_resp.keys != None:  # we had a response
    thisExp.addData('Welcomekey_resp.rt', Welcomekey_resp.rt)
thisExp.addData('Welcomekey_resp.started', Welcomekey_resp.tStartRefresh)
thisExp.addData('Welcomekey_resp.stopped', Welcomekey_resp.tStopRefresh)
thisExp.nextEntry()
# the Routine "Welcome_Screen" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

# ------Prepare to start Routine "Internet_Welcome_Screen"-------
# update component parameters for each repeat
Internetkey_resp.keys = []
Internetkey_resp.rt = []
# keep track of which components have finished
Internet_Welcome_ScreenComponents = [Internettext, Internetkey_resp]
for thisComponent in Internet_Welcome_ScreenComponents:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED
# reset timers
t = 0
_timeToFirstFrame = win.getFutureFlipTime(clock="now")
Internet_Welcome_ScreenClock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
frameN = -1
continueRoutine = True

# -------Run Routine "Internet_Welcome_Screen"-------
while continueRoutine:
    # get current time
    t = Internet_Welcome_ScreenClock.getTime()
    tThisFlip = win.getFutureFlipTime(clock=Internet_Welcome_ScreenClock)
    tThisFlipGlobal = win.getFutureFlipTime(clock=None)
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *Internettext* updates
    if Internettext.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
        # keep track of start time/frame for later
        Internettext.frameNStart = frameN  # exact frame index
        Internettext.tStart = t  # local t and not account for scr refresh
        Internettext.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(Internettext, 'tStartRefresh')  # time at next scr refresh
        Internettext.setAutoDraw(True)
    
    # *Internetkey_resp* updates
    waitOnFlip = False
    if Internetkey_resp.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
        # keep track of start time/frame for later
        Internetkey_resp.frameNStart = frameN  # exact frame index
        Internetkey_resp.tStart = t  # local t and not account for scr refresh
        Internetkey_resp.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(Internetkey_resp, 'tStartRefresh')  # time at next scr refresh
        Internetkey_resp.status = STARTED
        # keyboard checking is just starting
        waitOnFlip = True
        win.callOnFlip(Internetkey_resp.clock.reset)  # t=0 on next screen flip
        win.callOnFlip(Internetkey_resp.clearEvents, eventType='keyboard')  # clear events on next screen flip
    if Internetkey_resp.status == STARTED and not waitOnFlip:
        theseKeys = Internetkey_resp.getKeys(keyList=['space'], waitRelease=False)
        if len(theseKeys):
            theseKeys = theseKeys[0]  # at least one key was pressed
            
            # check for quit:
            if "escape" == theseKeys:
                endExpNow = True
            Internetkey_resp.keys = theseKeys.name  # just the last key pressed
            Internetkey_resp.rt = theseKeys.rt
            # a response ends the routine
            continueRoutine = False
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in Internet_Welcome_ScreenComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "Internet_Welcome_Screen"-------
for thisComponent in Internet_Welcome_ScreenComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('Internettext.started', Internettext.tStartRefresh)
thisExp.addData('Internettext.stopped', Internettext.tStopRefresh)
# check responses
if Internetkey_resp.keys in ['', [], None]:  # No response was made
    Internetkey_resp.keys = None
thisExp.addData('Internetkey_resp.keys',Internetkey_resp.keys)
if Internetkey_resp.keys != None:  # we had a response
    thisExp.addData('Internetkey_resp.rt', Internetkey_resp.rt)
thisExp.addData('Internetkey_resp.started', Internetkey_resp.tStartRefresh)
thisExp.addData('Internetkey_resp.stopped', Internetkey_resp.tStopRefresh)
thisExp.nextEntry()
# the Routine "Internet_Welcome_Screen" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

# set up handler to look after randomisation of conditions etc
StudyQuestions = data.TrialHandler(nReps=1, method='sequential', 
    extraInfo=expInfo, originPath=-1,
    trialList=data.importConditions('Internet Addiction Questions.xlsx'),
    seed=None, name='StudyQuestions')
thisExp.addLoop(StudyQuestions)  # add the loop to the experiment
thisStudyQuestion = StudyQuestions.trialList[0]  # so we can initialise stimuli with some values
# abbreviate parameter names if possible (e.g. rgb = thisStudyQuestion.rgb)
if thisStudyQuestion != None:
    for paramName in thisStudyQuestion:
        exec('{} = thisStudyQuestion[paramName]'.format(paramName))

for thisStudyQuestion in StudyQuestions:
    currentLoop = StudyQuestions
    # abbreviate parameter names if possible (e.g. rgb = thisStudyQuestion.rgb)
    if thisStudyQuestion != None:
        for paramName in thisStudyQuestion:
            exec('{} = thisStudyQuestion[paramName]'.format(paramName))
    
    # ------Prepare to start Routine "Study_Trial"-------
    # update component parameters for each repeat
    StudyQuestiontext.setText(Questions)
    InternetNumberkey_resp.keys = []
    InternetNumberkey_resp.rt = []
    # keep track of which components have finished
    Study_TrialComponents = [StudyQuestiontext, InternetNumberkey_resp, instructionstext, instructions2text]
    for thisComponent in Study_TrialComponents:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    Study_TrialClock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
    frameN = -1
    continueRoutine = True
    
    # -------Run Routine "Study_Trial"-------
    while continueRoutine:
        # get current time
        t = Study_TrialClock.getTime()
        tThisFlip = win.getFutureFlipTime(clock=Study_TrialClock)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *StudyQuestiontext* updates
        if StudyQuestiontext.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            StudyQuestiontext.frameNStart = frameN  # exact frame index
            StudyQuestiontext.tStart = t  # local t and not account for scr refresh
            StudyQuestiontext.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(StudyQuestiontext, 'tStartRefresh')  # time at next scr refresh
            StudyQuestiontext.setAutoDraw(True)
        
        # *InternetNumberkey_resp* updates
        waitOnFlip = False
        if InternetNumberkey_resp.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            InternetNumberkey_resp.frameNStart = frameN  # exact frame index
            InternetNumberkey_resp.tStart = t  # local t and not account for scr refresh
            InternetNumberkey_resp.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(InternetNumberkey_resp, 'tStartRefresh')  # time at next scr refresh
            InternetNumberkey_resp.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(InternetNumberkey_resp.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(InternetNumberkey_resp.clearEvents, eventType='keyboard')  # clear events on next screen flip
        if InternetNumberkey_resp.status == STARTED and not waitOnFlip:
            theseKeys = InternetNumberkey_resp.getKeys(keyList=['0', '1', '2', '3', '4', '5', '6'], waitRelease=False)
            if len(theseKeys):
                theseKeys = theseKeys[0]  # at least one key was pressed
                
                # check for quit:
                if "escape" == theseKeys:
                    endExpNow = True
                InternetNumberkey_resp.keys = theseKeys.name  # just the last key pressed
                InternetNumberkey_resp.rt = theseKeys.rt
                # a response ends the routine
                continueRoutine = False
        
        # *instructionstext* updates
        if instructionstext.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            instructionstext.frameNStart = frameN  # exact frame index
            instructionstext.tStart = t  # local t and not account for scr refresh
            instructionstext.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(instructionstext, 'tStartRefresh')  # time at next scr refresh
            instructionstext.setAutoDraw(True)
        
        # *instructions2text* updates
        if instructions2text.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            instructions2text.frameNStart = frameN  # exact frame index
            instructions2text.tStart = t  # local t and not account for scr refresh
            instructions2text.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(instructions2text, 'tStartRefresh')  # time at next scr refresh
            instructions2text.setAutoDraw(True)
        
        # check for quit (typically the Esc key)
        if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
            core.quit()
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in Study_TrialComponents:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # -------Ending Routine "Study_Trial"-------
    for thisComponent in Study_TrialComponents:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    StudyQuestions.addData('StudyQuestiontext.started', StudyQuestiontext.tStartRefresh)
    StudyQuestions.addData('StudyQuestiontext.stopped', StudyQuestiontext.tStopRefresh)
    # check responses
    if InternetNumberkey_resp.keys in ['', [], None]:  # No response was made
        InternetNumberkey_resp.keys = None
    StudyQuestions.addData('InternetNumberkey_resp.keys',InternetNumberkey_resp.keys)
    if InternetNumberkey_resp.keys != None:  # we had a response
        StudyQuestions.addData('InternetNumberkey_resp.rt', InternetNumberkey_resp.rt)
    StudyQuestions.addData('InternetNumberkey_resp.started', InternetNumberkey_resp.tStartRefresh)
    StudyQuestions.addData('InternetNumberkey_resp.stopped', InternetNumberkey_resp.tStopRefresh)
    StudyQuestions.addData('instructionstext.started', instructionstext.tStartRefresh)
    StudyQuestions.addData('instructionstext.stopped', instructionstext.tStopRefresh)
    StudyQuestions.addData('instructions2text.started', instructions2text.tStartRefresh)
    StudyQuestions.addData('instructions2text.stopped', instructions2text.tStopRefresh)
    # the Routine "Study_Trial" was not non-slip safe, so reset the non-slip timer
    routineTimer.reset()
    thisExp.nextEntry()
    
# completed 1 repeats of 'StudyQuestions'


# ------Prepare to start Routine "Personality_Welcome_Screen"-------
# update component parameters for each repeat
key_resp.keys = []
key_resp.rt = []
# keep track of which components have finished
Personality_Welcome_ScreenComponents = [Personalitytext, key_resp]
for thisComponent in Personality_Welcome_ScreenComponents:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED
# reset timers
t = 0
_timeToFirstFrame = win.getFutureFlipTime(clock="now")
Personality_Welcome_ScreenClock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
frameN = -1
continueRoutine = True

# -------Run Routine "Personality_Welcome_Screen"-------
while continueRoutine:
    # get current time
    t = Personality_Welcome_ScreenClock.getTime()
    tThisFlip = win.getFutureFlipTime(clock=Personality_Welcome_ScreenClock)
    tThisFlipGlobal = win.getFutureFlipTime(clock=None)
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *Personalitytext* updates
    if Personalitytext.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
        # keep track of start time/frame for later
        Personalitytext.frameNStart = frameN  # exact frame index
        Personalitytext.tStart = t  # local t and not account for scr refresh
        Personalitytext.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(Personalitytext, 'tStartRefresh')  # time at next scr refresh
        Personalitytext.setAutoDraw(True)
    
    # *key_resp* updates
    waitOnFlip = False
    if key_resp.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
        # keep track of start time/frame for later
        key_resp.frameNStart = frameN  # exact frame index
        key_resp.tStart = t  # local t and not account for scr refresh
        key_resp.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(key_resp, 'tStartRefresh')  # time at next scr refresh
        key_resp.status = STARTED
        # keyboard checking is just starting
        waitOnFlip = True
        win.callOnFlip(key_resp.clock.reset)  # t=0 on next screen flip
        win.callOnFlip(key_resp.clearEvents, eventType='keyboard')  # clear events on next screen flip
    if key_resp.status == STARTED and not waitOnFlip:
        theseKeys = key_resp.getKeys(keyList=['space'], waitRelease=False)
        if len(theseKeys):
            theseKeys = theseKeys[0]  # at least one key was pressed
            
            # check for quit:
            if "escape" == theseKeys:
                endExpNow = True
            key_resp.keys = theseKeys.name  # just the last key pressed
            key_resp.rt = theseKeys.rt
            # a response ends the routine
            continueRoutine = False
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in Personality_Welcome_ScreenComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "Personality_Welcome_Screen"-------
for thisComponent in Personality_Welcome_ScreenComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('Personalitytext.started', Personalitytext.tStartRefresh)
thisExp.addData('Personalitytext.stopped', Personalitytext.tStopRefresh)
# check responses
if key_resp.keys in ['', [], None]:  # No response was made
    key_resp.keys = None
thisExp.addData('key_resp.keys',key_resp.keys)
if key_resp.keys != None:  # we had a response
    thisExp.addData('key_resp.rt', key_resp.rt)
thisExp.addData('key_resp.started', key_resp.tStartRefresh)
thisExp.addData('key_resp.stopped', key_resp.tStopRefresh)
thisExp.nextEntry()
# the Routine "Personality_Welcome_Screen" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

# set up handler to look after randomisation of conditions etc
StudyQuestions2 = data.TrialHandler(nReps=1, method='sequential', 
    extraInfo=expInfo, originPath=-1,
    trialList=data.importConditions('Personality Questions.xlsx'),
    seed=None, name='StudyQuestions2')
thisExp.addLoop(StudyQuestions2)  # add the loop to the experiment
thisStudyQuestions2 = StudyQuestions2.trialList[0]  # so we can initialise stimuli with some values
# abbreviate parameter names if possible (e.g. rgb = thisStudyQuestions2.rgb)
if thisStudyQuestions2 != None:
    for paramName in thisStudyQuestions2:
        exec('{} = thisStudyQuestions2[paramName]'.format(paramName))

for thisStudyQuestions2 in StudyQuestions2:
    currentLoop = StudyQuestions2
    # abbreviate parameter names if possible (e.g. rgb = thisStudyQuestions2.rgb)
    if thisStudyQuestions2 != None:
        for paramName in thisStudyQuestions2:
            exec('{} = thisStudyQuestions2[paramName]'.format(paramName))
    
    # ------Prepare to start Routine "Study_Trial_2"-------
    # update component parameters for each repeat
    PQtext.setText(Questions)
    rating_2.reset()
    # keep track of which components have finished
    Study_Trial_2Components = [PQtext, rating_2]
    for thisComponent in Study_Trial_2Components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    Study_Trial_2Clock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
    frameN = -1
    continueRoutine = True
    
    # -------Run Routine "Study_Trial_2"-------
    while continueRoutine:
        # get current time
        t = Study_Trial_2Clock.getTime()
        tThisFlip = win.getFutureFlipTime(clock=Study_Trial_2Clock)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *PQtext* updates
        if PQtext.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            PQtext.frameNStart = frameN  # exact frame index
            PQtext.tStart = t  # local t and not account for scr refresh
            PQtext.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(PQtext, 'tStartRefresh')  # time at next scr refresh
            PQtext.setAutoDraw(True)
        # *rating_2* updates
        if rating_2.status == NOT_STARTED and t >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            rating_2.frameNStart = frameN  # exact frame index
            rating_2.tStart = t  # local t and not account for scr refresh
            rating_2.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(rating_2, 'tStartRefresh')  # time at next scr refresh
            rating_2.setAutoDraw(True)
        continueRoutine &= rating_2.noResponse  # a response ends the trial
        
        # check for quit (typically the Esc key)
        if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
            core.quit()
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in Study_Trial_2Components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # -------Ending Routine "Study_Trial_2"-------
    for thisComponent in Study_Trial_2Components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    StudyQuestions2.addData('PQtext.started', PQtext.tStartRefresh)
    StudyQuestions2.addData('PQtext.stopped', PQtext.tStopRefresh)
    # store data for StudyQuestions2 (TrialHandler)
    StudyQuestions2.addData('rating_2.response', rating_2.getRating())
    StudyQuestions2.addData('rating_2.rt', rating_2.getRT())
    StudyQuestions2.addData('rating_2.started', rating_2.tStart)
    StudyQuestions2.addData('rating_2.stopped', rating_2.tStop)
    # the Routine "Study_Trial_2" was not non-slip safe, so reset the non-slip timer
    routineTimer.reset()
    thisExp.nextEntry()
    
# completed 1 repeats of 'StudyQuestions2'


# ------Prepare to start Routine "Results"-------
# update component parameters for each repeat
key_resp_2.keys = []
key_resp_2.rt = []
# keep track of which components have finished
ResultsComponents = [resultstext, key_resp_2]
for thisComponent in ResultsComponents:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED
# reset timers
t = 0
_timeToFirstFrame = win.getFutureFlipTime(clock="now")
ResultsClock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
frameN = -1
continueRoutine = True

# -------Run Routine "Results"-------
while continueRoutine:
    # get current time
    t = ResultsClock.getTime()
    tThisFlip = win.getFutureFlipTime(clock=ResultsClock)
    tThisFlipGlobal = win.getFutureFlipTime(clock=None)
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *resultstext* updates
    if resultstext.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
        # keep track of start time/frame for later
        resultstext.frameNStart = frameN  # exact frame index
        resultstext.tStart = t  # local t and not account for scr refresh
        resultstext.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(resultstext, 'tStartRefresh')  # time at next scr refresh
        resultstext.setAutoDraw(True)
    
    # *key_resp_2* updates
    waitOnFlip = False
    if key_resp_2.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
        # keep track of start time/frame for later
        key_resp_2.frameNStart = frameN  # exact frame index
        key_resp_2.tStart = t  # local t and not account for scr refresh
        key_resp_2.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(key_resp_2, 'tStartRefresh')  # time at next scr refresh
        key_resp_2.status = STARTED
        # keyboard checking is just starting
        waitOnFlip = True
        win.callOnFlip(key_resp_2.clock.reset)  # t=0 on next screen flip
        win.callOnFlip(key_resp_2.clearEvents, eventType='keyboard')  # clear events on next screen flip
    if key_resp_2.status == STARTED and not waitOnFlip:
        theseKeys = key_resp_2.getKeys(keyList=['space'], waitRelease=False)
        if len(theseKeys):
            theseKeys = theseKeys[0]  # at least one key was pressed
            
            # check for quit:
            if "escape" == theseKeys:
                endExpNow = True
            key_resp_2.keys = theseKeys.name  # just the last key pressed
            key_resp_2.rt = theseKeys.rt
            # a response ends the routine
            continueRoutine = False
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in ResultsComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "Results"-------
for thisComponent in ResultsComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('resultstext.started', resultstext.tStartRefresh)
thisExp.addData('resultstext.stopped', resultstext.tStopRefresh)
# check responses
if key_resp_2.keys in ['', [], None]:  # No response was made
    key_resp_2.keys = None
thisExp.addData('key_resp_2.keys',key_resp_2.keys)
if key_resp_2.keys != None:  # we had a response
    thisExp.addData('key_resp_2.rt', key_resp_2.rt)
thisExp.addData('key_resp_2.started', key_resp_2.tStartRefresh)
thisExp.addData('key_resp_2.stopped', key_resp_2.tStopRefresh)
thisExp.nextEntry()
# the Routine "Results" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

# Flip one final time so any remaining win.callOnFlip() 
# and win.timeOnFlip() tasks get executed before quitting
win.flip()

# these shouldn't be strictly necessary (should auto-save)
thisExp.saveAsWideText(filename+'.csv')
thisExp.saveAsPickle(filename)
logging.flush()
# make sure everything is closed down
thisExp.abort()  # or data files will save again on exit
win.close()
core.quit()
